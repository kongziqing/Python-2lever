"""
Python中的文件操作需要一个文件对象才可以进行，如果要想活动的此文件对象，则必须利用内建模块中提供的open()函数完成，此函数定义如下：
def open(file,mode='r',buffering=None,encoding=None,errors=None,newline=None,closefd=True)
在open()函数中参数的作用如下：
file:定义要操作文件的相对或绝对路径，该参数必须传递
mode:文件操作模式,默认为读取模式(其值为r),可选择其他操作模式
buffering：设置缓冲区大小
encoding:文件操作编码，一般使用UTF8编码
errors：设置报错级别，是需要强制处理（其值为strict）还是忽略错误（其值为ignore），当为None时，则表示不进行任何处理
newline：设置换行符
closefd：设置文件关闭模式，如果传进来的路径是文件，则表示结束时要关闭文件（设置为True）

                            文件操作模式标记
--------------------------------------------------------------
1.r 使用只读模式打开文件，此为默认模式
2.w 写模式，如果文件存在，则覆盖，如果文件不存在，则创建
3.x 写模式，新建一个文件，如果该文件已存在，则会报错
4.a 内容追加模式
5.b 二进制模式
6.t 文本模式（默认）
7.+ 打开一个文件进行更新（可读可写）
----------------------------------------------------------------
当获取到文件对象之后，就可以通过下表所示的文件属性获取相关的文件信息

                        文件属性
-----------------------------------------------------------------
1.file.closed  如果文件已经关闭，则返回True，否则返回False
2.file.mode    返回被打开文件的访问模式
3.file.name     返回文件的名称

文件操作属于资源的访问，文件操作完成后一定要使用close()方法关闭文件，下面代码演示了文件的基本操作形式

"""
# coding:UTF-8
def main():						# 主函数
    try: 							# 捕获可能产生的异常
        file = open(".\info.txt", "r") 			# 采用只读模式打开文件
        print("文件名称：%s" % file.name)  			# 获取文件名称
        print("文件是否已关闭：%s" % file.closed) 			# 判断文件状态
        print("文件访问模式：%s" % file.mode) 			# 获取访问模式
    finally: 						# 资源操作必须释放
        file.close()						# 关闭文件
        print("调用close()方法后的关闭状态：%s" % file.closed) 	# 文件关闭后的状态
if __name__ == "__main__":					# 判断程序执行名称
    main()							# 调用主函数
