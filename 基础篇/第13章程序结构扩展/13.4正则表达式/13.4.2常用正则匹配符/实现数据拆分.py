"""
为了简化正则匹配符号的定义，在正则表达式中又提供有一些简化表达式，利用这些简化表达式可以方便地进行数字，字母，空格等内容的匹配，
简化正则表达式如下所示
1.\A 匹配开始边界，等价于“^”，忽略多行模式
2.\Z 匹配结束边界，等价于“$”,忽略多行模式
3.\b 匹配开始或结束位置的空字符串
4。\B  匹配不再开始或结束位置的空字符串
5.\d 匹配一位数，等价于“[0-9]”
6.\D 匹配一位非数字，等价于“[^0-9]”
7.\s 匹配任意的一位空格，等价于“[\t\n\r\f\v]”
8.\S匹配任意的一位非空格，扥驾驭“【^\t\n\r\f\v】”
9.\w 匹配任意的一位字母（大小写）和非数字、_,等价于“[a-zA-Z0-9]”
10.\W 匹配任意的一位非字母（大小写）和非数字，_.等价于“[^a-zA-Z0-9]”
11.. 表达任意一位字符

本程序利用简化的数字正则表达式并结合量词表达式“+”对字符串中的一位或多位数字进行匹配与拆分，
在进行正则表达式定义中，为了描述更加复杂的匹配结构，也可以通过括号“（）”将若干个匹配符号定义在一起，这样就可以为这个整体的表达式定义量词

"""
import re
def main():
    str="y1o22o333t4444k55555.666666com"
    pattern=r"\d+"
    result = re.split(pattern, str)#利用正则拆分，结果为列表
    print("正则匹配拆分结果：%s"%result)  #信息输出
if __name__ == '__main__':
    main()
