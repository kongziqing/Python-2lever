"""
一个表达式可以匹配任意多个数据内容，为了清晰的从这些数据中获取指定子数据，可以通过分组的形式对数据进行归类，在正则表达式中
通过圆括号“（）”就可以定义分组，需要注意的是，在没有使用分组时，整个正则表达式默认为是一个隐含的全局分组（索引0）。与分组有关的
正则表达式如表
1.（...）  默认分组捕获模式，可以单独的取出分组内容，索引值从1开始
2.（？iLmsux）  设置分组模式i,L,m,s,u,x
3.(?:...)  分组不捕获模式，计算索引时会跳过该分组
4.（？P<name>...）  分组命名模式，可以通过索引编号或name名称获取内容
5.（？P=name）  分组引用模式，可以在一个正则表达式中引用前面命名过的正则表达式
"""
# coding : UTF-8
import re							# 模块导入
def main():						# 主函数
    info = "id:yootk,phone:110120119,birthday:1978-09-19"		# 字符串
    pattern = r"(\d{4})-(\d{2})-(\d{2})" 			# 匹配生日数据，进行数据分组
    match = re.search(pattern,info) 				# 获取匹配对象
    print("获取所有分组数据：%s" % match.group())			# 与group(0)相同
    print("获取第1组数据：%s" % match.group(1)) 			# 获取分组内容
    print("获取第2组数据：%s" % match.group(2)) 			# 获取分组内容
    print("获取第3组数据：%s" % match.group(3)) 			# 获取分组内容
if __name__ == "__main__":					# 判断程序执行名称
    main()							# 调用主函数
